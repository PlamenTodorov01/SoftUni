package AssociativeArraysLambdaAndStreamAPI_MoreExercises;

import java.util.*;

public class Ranking_01 {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);

        String input = scanner.nextLine();
        LinkedHashMap<String, String> allContests = new LinkedHashMap<>();
        TreeMap<String, LinkedHashMap<String, Integer>> users = new TreeMap<>();

        while (!input.equals("end of contests")) {
            String[] tokens = input.split(":");
            String contest = tokens[0];
            String password = tokens[1];

            allContests.put(contest, password);

            input = scanner.nextLine();
        }

        input = scanner.nextLine();

        while (!input.equals("end of submissions")) {
            String[] tokens = input.split("=>");
            String contest = tokens[0];
            String password = tokens[1];
            String username = tokens[2];
            int points = Integer.parseInt(tokens[3]);

            if (allContests.containsKey(contest) && allContests.get(contest).equals(password)) {

                LinkedHashMap<String, Integer> course = new LinkedHashMap<>();
                course.put(contest, points);

                if (!users.containsKey(username)) {
                    users.put(username, course);
                } else {
                    if (!users.get(username).containsKey(contest)) {
                        users.get(username).put(contest, points);
                    } else {
                        users.get(username).put(contest, Math.max(points, users.get(username).get(contest)));
                    }

                }
            }

            input = scanner.nextLine();
        }

        int userMaxPoints = 0;
        String bestCandidate = "";

        for (Map.Entry<String, LinkedHashMap<String, Integer>> user : users.entrySet()) {
            int sum = user.getValue().values().stream().mapToInt(i -> i).sum();
            if (sum > userMaxPoints) {
                userMaxPoints = sum;
                bestCandidate = user.getKey();
            }
        }

        System.out.printf("Best candidate is %s with total %d points.\n", bestCandidate,userMaxPoints);
        System.out.println("Ranking:");
        users.forEach((key,value) -> {
            System.out.printf("%s\n", key);
            value.entrySet().stream()
                    .sorted((f,s) -> s.getValue() - f.getValue())
                    .forEach(i -> System.out.printf("# %s -> %d\n", i.getKey(), i.getValue()));

        });


    }
}
