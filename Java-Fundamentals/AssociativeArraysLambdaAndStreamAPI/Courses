package AssociativeArraysLambdaAndStreamAPI_Exercise;

import java.util.*;
import java.util.stream.Collectors;

public class Courses_06 {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);

        String input = scanner.nextLine();
        Map<String, List<String>> courses = new LinkedHashMap<>();

        while (!input.equals("end")) {
            String[] tokens = input.split(" : ");
            String courseName = tokens[0];
            String studentName = tokens[1];

            if (!courses.containsKey(courseName)) {
                courses.put(courseName, new ArrayList<>());

            }
            courses.get(courseName).add(studentName);


            input = scanner.nextLine();
        }

      sortAndPrintResult(courses);

       //Print result without sorting
//        for (Map.Entry<String, List<String>> entry : courses.entrySet()) {
//            System.out.println(entry.getKey() + ": " + entry.getValue().size());
//            entry.getValue().stream().forEach(s -> System.out.println("-- " + s));
//        }
    }

    public static void sortAndPrintResult(Map<String, List<String>> courses) {
        courses.entrySet()
                .stream()
                .sorted((f, s) -> s.getValue().size() - f.getValue().size())
                .forEach(c -> {
                    System.out.println(c.getKey() + ": " + c.getValue().size());
                    c.getValue()
                            .stream()
                            .sorted((f,s) -> f.compareTo(s))
                            .forEach(s -> System.out.println("-- " + s));
                });
    }
}
