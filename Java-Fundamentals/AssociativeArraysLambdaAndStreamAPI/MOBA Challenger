package AssociativeArraysLambdaAndStreamAPI_MoreExercises;

import java.util.HashMap;
import java.util.Map;
import java.util.Scanner;
import java.util.TreeMap;

public class MOBAChallenger_03 {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);

        String input = scanner.nextLine();
        Map<String, HashMap<String, Integer>> allPlayers = new TreeMap<>();

        while (!input.equals("Season end")) {
            String[] tokens = input.split(" -> ");
            if (tokens.length > 1) {
                String player = tokens[0];
                String position = tokens[1];
                int skill = Integer.parseInt(tokens[2]);

                if (!allPlayers.containsKey(player)) {
                    allPlayers.put(player, new HashMap<>());
                }
                if (!allPlayers.get(player).containsKey(position) || allPlayers.get(player).get(position) < skill) {
                    allPlayers.get(player).put(position, skill);
                }

            } else {
                tokens = input.split(" vs ");
                String firstPlayer = tokens[0];
                String secondPlayer = tokens[1];

                if (allPlayers.containsKey(firstPlayer) && allPlayers.containsKey(secondPlayer)) {
                    boolean hasCommon = false;
                    for (String s : allPlayers.get(firstPlayer).keySet()) {
                        for (String s1 : allPlayers.get(secondPlayer).keySet()) {
                            if (s.equals(s1)) {
                                hasCommon = true;
                                break;
                            }
                        }
                    }

                    if (hasCommon) {
                        int firstPlayerPoints = allPlayers.get(firstPlayer).values().stream().mapToInt(i -> i).sum();
                        int secondPlayerPoints = allPlayers.get(secondPlayer).values().stream().mapToInt(i -> i).sum();

                        if (firstPlayerPoints > secondPlayerPoints) {
                            allPlayers.remove(secondPlayer);
                        } else if (firstPlayerPoints < secondPlayerPoints) {
                            allPlayers.remove(firstPlayer);
                        }
                    }

                }
            }

            input = scanner.nextLine();
        }

        allPlayers.entrySet().stream().sorted((p1, p2) -> {
                    int result = Integer.compare(p2.getValue().values().stream().mapToInt(i -> i).sum(),
                            p1.getValue().values().stream().mapToInt(i -> i).sum());
                    if (result == 0) {
                        result = p1.getKey().compareTo(p2.getKey());
                    }
                    return result;
                })
                .forEach(entry -> {
                    System.out.printf("%s: %d skill\n", entry.getKey(), entry.getValue().values()
                            .stream().mapToInt(i -> i).sum());
                    entry.getValue()
                            .entrySet()
                            .stream()
                            .sorted((e1, e2) -> {
                                int result = Integer.compare(e2.getValue(), e1.getValue());
                                if (result == 0) {
                                    result = e1.getKey().compareTo(e2.getKey());
                                }
                                return result;
                            }).forEach(e -> {
                                System.out.printf("- %s <::> %d\n", e.getKey(), e.getValue());
                            });
                });

    }
}
