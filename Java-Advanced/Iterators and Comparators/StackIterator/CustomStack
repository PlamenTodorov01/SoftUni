package IteratorsAndComparators_Exercise.StackIterator_03;

import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;

public class CustomStack implements Iterable<Integer>{
    private List<Integer> numbers;

    public CustomStack() {
        this.numbers = new ArrayList<>();
    }

    public List<Integer> getNumbers() {
        return this.numbers;
    }

    public void push(int number) {
        numbers.add(number);
    }

    public int pop() {
        if (numbers.isEmpty()) {
            System.out.println("No elements");
        } else {
            int number = numbers.get(numbers.size() - 1);
            numbers.remove(numbers.size() - 1);
            return number;
        }
        return 0;
    }

    @Override
    public Iterator<Integer> iterator() {
        return new Iterator<Integer>() {
            private int index = numbers.size() - 1;
            @Override
            public boolean hasNext() {
                return index >= 0;
            }

            @Override
            public Integer next() {
                int number = numbers.get(index);
                index--;
                return number;
            }
        };
    }
}
