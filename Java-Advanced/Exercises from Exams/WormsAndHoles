package ExamPreparation;

import java.util.*;
import java.util.stream.Collectors;

public class WormsAndHoles_01 {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);


        ArrayDeque<Integer> stack = new ArrayDeque<>();
        ArrayDeque<Integer> queue = new ArrayDeque<>();

        Arrays.stream(scanner.nextLine().split("\\s+")).map(Integer::parseInt).forEach(stack::push);
        Arrays.stream(scanner.nextLine().split("\\s+")).map(Integer::parseInt).forEach(queue::offer);
        int matches = 0;
        int initialWormCount = stack.size();

        while (!stack.isEmpty() && !queue.isEmpty()) {
            int worm = stack.pop();
            int hole = queue.poll();

            if (worm == hole) {
                matches++;
            } else {
                worm -= 3;
                if (worm > 0) {
                    stack.push(worm);
                }
            }
        }
        List<Integer> reversedStack = new ArrayList<>(stack);
        Collections.reverse(reversedStack);

        //First output line
        if (matches > 0) {
            System.out.println("Matches: " + matches);
        } else {
            System.out.println("There are no matches.");
        }

        //Second output line
        if (stack.isEmpty() && initialWormCount == matches) {
            System.out.println("Every worm found a suitable hole!");
        } else if (stack.isEmpty() && initialWormCount > matches) {
            System.out.println("Worms left: none");
        } else if (!stack.isEmpty()) {
            String output = reversedStack.stream().map(String::valueOf).collect(Collectors.joining(", "));
            System.out.println("Worms left: " + output);
        }

        //Third output line
        if (queue.isEmpty()) {
            System.out.println("Holes left: none");
        } else {
            String output = queue.stream().map(String::valueOf).collect(Collectors.joining(", "));
            System.out.println("Holes left: " + output);
        }


    }
}
