package furnitureFactory.core;

import furnitureFactory.entities.factories.AdvancedFactory;
import furnitureFactory.entities.factories.Factory;
import furnitureFactory.entities.factories.OrdinaryFactory;
import furnitureFactory.entities.wood.OakWood;
import furnitureFactory.entities.wood.Wood;
import furnitureFactory.entities.workshops.DeckingWorkshop;
import furnitureFactory.entities.workshops.TableWorkshop;
import furnitureFactory.entities.workshops.Workshop;
import furnitureFactory.repositories.WoodRepositoryImpl;
import furnitureFactory.repositories.WorkshopRepositoryImpl;

import java.util.ArrayList;
import java.util.Collection;
import java.util.List;

import static furnitureFactory.common.ConstantMessages.*;
import static furnitureFactory.common.ExceptionMessages.*;

public class ControllerImpl implements Controller {
    private WoodRepositoryImpl woodRepository;
    private WorkshopRepositoryImpl workshopRepository;
    private Collection<Factory> factories;

    public ControllerImpl() {
        this.woodRepository = new WoodRepositoryImpl();
        this.workshopRepository = new WorkshopRepositoryImpl();
        this.factories = new ArrayList<>();
    }
    @Override
    public String buildFactory(String factoryType, String factoryName) {
        Factory factory;
        switch (factoryType) {
            case "OrdinaryFactory" -> factory = new OrdinaryFactory(factoryName);
            case "AdvancedFactory" -> factory = new AdvancedFactory(factoryName);
            default -> throw new IllegalArgumentException(INVALID_FACTORY_TYPE);
        }

        Factory factory1 = factories.stream()
                .filter(f -> f.getName().equals(factoryName))
                .findAny()
                .orElse(null);

        if (factory1 != null) {
            throw new NullPointerException(FACTORY_EXISTS);
        }

        factories.add(factory);

        return SUCCESSFULLY_BUILD_FACTORY_TYPE.formatted(factoryType,factoryName);
    }

    @Override
    public Factory getFactoryByName(String factoryName) {
        return factories.stream()
                .filter(f -> f.getName().equals(factoryName))
                .findAny()
                .orElse(null);
    }

    @Override
    public String buildWorkshop(String workshopType, int woodCapacity) {
        Workshop workshop;

        switch (workshopType) {
            case "TableWorkshop" -> workshop = new TableWorkshop(woodCapacity);
            case "DeckingWorkshop" -> workshop = new DeckingWorkshop(woodCapacity);
            default -> throw new IllegalArgumentException(INVALID_WORKSHOP_TYPE);
        }

        workshopRepository.add(workshop);
        return SUCCESSFULLY_BUILD_WORKSHOP_TYPE.formatted(workshopType);
    }

    @Override
    public String addWorkshopToFactory(String factoryName, String workshopType) {
        Workshop workshop = workshopRepository.findByType(workshopType);

        if (workshop == null) {
            throw new NullPointerException(NO_WORKSHOP_FOUND.formatted(workshopType));
        }

        Factory factory = factories.stream()
                .filter(f -> f.getName().equals(factoryName))
                .findFirst()
                .orElse(null);

        Workshop workshop1 = factory.getWorkshops().stream()
                .filter(w -> w.getClass().getSimpleName().equals(workshopType))
                .findFirst()
                .orElse(null);

        if (workshop1 != null) {
            throw new IllegalArgumentException(WORKSHOP_EXISTS);
        }

        if (workshop instanceof DeckingWorkshop && factory instanceof AdvancedFactory) {
                factory.addWorkshop(workshop);
        } else if (workshop instanceof TableWorkshop && factory instanceof OrdinaryFactory) {
            factory.addWorkshop(workshop);
        } else {
            return NON_SUPPORTED_WORKSHOP;
        }
        factory.addWorkshop(workshop);

        return SUCCESSFULLY_ADDED_WORKSHOP_IN_FACTORY.formatted(workshopType,factoryName);
    }


    @Override
    public String buyWoodForFactory(String woodType) {
        if (!woodType.equals("OakWood")) {
            throw new IllegalArgumentException(INVALID_WOOD_TYPE);
        }
        Wood wood = new OakWood();
        woodRepository.add(wood);

        return SUCCESSFULLY_BOUGHT_WOOD_FOR_FACTORY.formatted(woodType);
    }

    @Override
    public String addWoodToWorkshop(String factoryName, String workshopType, String woodType) {
        Factory factory = factories.stream()
                .filter(f -> f.getName().equals(factoryName))
                .findFirst()
                .orElse(null);
        if (factory.getWorkshops().isEmpty()) {
            throw new NullPointerException(NO_WORKSHOP_ADDED);
        }

       if (woodRepository.findByType(woodType) == null) {
           throw new NullPointerException(NO_WOOD_FOUND.formatted(woodType));
       }

        Workshop workshop = factory.getWorkshops().stream()
                .filter(w -> w.getClass().getSimpleName().equals(workshopType))
                .findFirst()
                .orElse(null);

       workshop.addWood(new OakWood());
        return SUCCESSFULLY_ADDED_WOOD_IN_WORKSHOP.formatted(woodType,workshopType);
    }

    @Override
    public String produceFurniture(String factoryName) {
        Factory factory = factories.stream()
                .filter(f -> f.getName().equals(factoryName))
                .findFirst()
                .orElse(null);

        if (factory.getWorkshops().isEmpty()) {
            throw new NullPointerException(THERE_ARE_NO_WORKSHOPS.formatted(factoryName));
        }
        List<Workshop> removedWorkshops = new ArrayList<>();

        for (Workshop workshop : factory.getWorkshops()) {
            int woodQuantity = workshop.getWoodQuantity();

            while (woodQuantity > workshop.getWoodQuantityReduceFactor()) {
                if (woodQuantity < workshop.getWoodQuantityReduceFactor() && woodQuantity > 0) {
                    System.out.println(INSUFFICIENT_WOOD);
                    break;
                } else if (woodQuantity <= 0) {
                    System.out.printf((WORKSHOP_STOPPED_WORKING) + "%n", workshop.getClass().getSimpleName());
                    removedWorkshops.add(workshop);
                    break;
                }
                workshop.produce();
            }
        }

        for (Workshop removedWorkshop : removedWorkshops) {
            workshopRepository.remove(removedWorkshop);
            factories.removeIf(factory1 -> factory1.getWorkshops().equals(removedWorkshop));
        }

        int sum = factory.getWorkshops().stream()
                .mapToInt(Workshop::getProducedFurnitureCount).sum();

        if (sum > 0) {
            System.out.printf((SUCCESSFUL_PRODUCTION) + "%n", sum, factoryName);
        } else {
            System.out.printf((FACTORY_DO_NOT_PRODUCED) + "%n", factoryName);
        }

        return null;
    }

    @Override
    public String getReport() {
        StringBuilder sb = new StringBuilder();

        for (Factory factory : factories) {

            String firstRow = String.format("Production by %s factory:",factory.getName());
            sb.append(firstRow).append(System.lineSeparator());

            if (factory.getWorkshops().isEmpty()) {
                sb.append("No workshops were added to produce furniture.");
                continue;
            }
            factory.getWorkshops()
                    .forEach(workshop -> {
                        String workshopType = workshop.getClass().getSimpleName();
                        int producedFurnitureCount = workshop.getProducedFurnitureCount();
                        String workshopInfo = String.format("%s: %d furniture produced"
                                , workshopType, producedFurnitureCount);
                        sb.append(workshopInfo).append(System.lineSeparator());
                    });

        }
        return sb.toString().trim();
    }
}
