package exam_preparation.dolphinarium.core;

import dolphinarium.entities.dolphins.BottleNoseDolphin;
import dolphinarium.entities.dolphins.Dolphin;
import dolphinarium.entities.dolphins.SpinnerDolphin;
import dolphinarium.entities.dolphins.SpottedDolphin;
import dolphinarium.entities.foods.Food;
import dolphinarium.entities.foods.Herring;
import dolphinarium.entities.foods.Mackerel;
import dolphinarium.entities.foods.Squid;
import dolphinarium.entities.pools.DeepWaterPool;
import dolphinarium.entities.pools.Pool;
import dolphinarium.entities.pools.ShallowWaterPool;
import dolphinarium.repositories.FoodRepositoryImpl;

import java.util.ArrayList;
import java.util.Collection;
import java.util.Iterator;
import java.util.stream.Collectors;

import static dolphinarium.common.ConstantMessages.*;
import static dolphinarium.common.ExceptionMessages.*;

public class ControllerImpl implements Controller {
    private FoodRepositoryImpl foodRepository;
    private Collection<Pool> pools;

    public ControllerImpl() {
        this.foodRepository = new FoodRepositoryImpl();
        this.pools = new ArrayList<>();
    }


    @Override
    public String addPool(String poolType, String poolName) {
        Pool pool;
        switch (poolType) {
            case "DeepWaterPool" -> pool = new DeepWaterPool(poolName);
            case "ShallowWaterPool" -> pool = new ShallowWaterPool(poolName);
            default -> throw new NullPointerException(INVALID_POOL_TYPE);
        }
        boolean poolNameExist = pools.stream()
                .anyMatch(p -> p.getName().equals(poolName));
        if (poolNameExist) {
            throw new NullPointerException(POOL_EXISTS);
        }
        pools.add(pool);

        return SUCCESSFULLY_ADDED_POOL_TYPE.formatted(poolType, poolName);
    }

    @Override
    public String buyFood(String foodType) {
        Food food;
        switch (foodType) {
            case "Squid" -> food = new Squid();
            case "Herring" -> food = new Herring();
            case "Mackerel" -> food = new Mackerel();
            default -> throw new IllegalArgumentException(INVALID_FOOD_TYPE);
        }
        foodRepository.add(food);

        return SUCCESSFULLY_BOUGHT_FOOD_TYPE.formatted(foodType);
    }

    @Override
    public String addFoodToPool(String poolName, String foodType) {
        Food food = foodRepository.findByType(foodType);
        if (food == null) {
            throw new IllegalArgumentException(NO_FOOD_FOUND.formatted(foodType));
        }

        Pool pool = getPoolByNameFromPoolCollection(poolName);
        pool.addFood(food);

        return SUCCESSFULLY_ADDED_FOOD_IN_POOL.formatted(foodType, poolName);
    }

    private Pool getPoolByNameFromPoolCollection(String poolName) {
        return pools.stream()
                .filter(p -> p.getName().equals(poolName))
                .findFirst()
                .orElse(null);
    }

    @Override
    public String addDolphin(String poolName, String dolphinType, String dolphinName, int energy) {
        Dolphin dolphin;

        switch (dolphinType) {
            case "BottleNoseDolphin" -> dolphin = new BottleNoseDolphin(dolphinName, energy);
            case "SpottedDolphin" -> dolphin = new SpottedDolphin(dolphinName, energy);
            case "SpinnerDolphin" -> dolphin = new SpinnerDolphin(dolphinName, energy);
            default -> throw new IllegalArgumentException(INVALID_DOLPHIN_TYPE);
        }

        Pool pool = getPoolByNameFromPoolCollection(poolName);
        boolean dolphinNameExist = pool.getDolphins().stream().anyMatch(d -> d.getName().equals(dolphinName));

        if (dolphinNameExist) {
            throw new IllegalArgumentException(DOLPHIN_EXISTS);
        }

        String poolType = pool.getClass().getSimpleName();
        boolean canSwim = true;

        if (dolphinType.equals("BottleNoseDolphin") && !poolType.equals("DeepWaterPool")) {
            canSwim = false;
        } else if (dolphinType.equals("SpinnerDolphin") && !poolType.equals("ShallowWaterPool")) {
            canSwim = false;
        }
        if (!canSwim) {
            return POOL_NOT_SUITABLE;
        }
        pool.addDolphin(dolphin);
        return SUCCESSFULLY_ADDED_DOLPHIN_IN_POOL.formatted(dolphinType, dolphinName, poolName);
    }

    @Override
    public String feedDolphins(String poolName, String foodType) {

        Pool pool = getPoolByNameFromPoolCollection(poolName);
        Food food = pool.getFoods().stream()
                .filter(f -> f.getClass().getSimpleName().equals(foodType))
                .findFirst()
                .orElseThrow(() -> new IllegalArgumentException(NO_FOOD_OF_TYPE_ADDED_TO_POOL));

        pool.getDolphins().forEach(d -> d.eat(food));

        int fedDolphinsCount = pool.getDolphins().size();
        pool.getFoods().remove(food);

        return DOLPHINS_FED.formatted(fedDolphinsCount, poolName);
    }

    @Override
    public String playWithDolphins(String poolName) {
        Pool pool = getPoolByNameFromPoolCollection(poolName);

        Collection<Dolphin> dolphins = pool.getDolphins();
        if (dolphins.isEmpty()) {
            throw new IllegalArgumentException(NO_DOLPHINS);
        }

        int exhaustedDolphins = 0;

        for (Dolphin dolphin : dolphins) {
            dolphin.jump();
            if (dolphin.getEnergy() <= 0) {
                exhaustedDolphins++;
            }
        }

//        Iterator<Dolphin> iterator = dolphins.iterator();
//        while (iterator.hasNext()) {
//            Dolphin dolphin = iterator.next();
//            dolphin.jump();
//            if (dolphin.getEnergy() <= 0) {
//                exhaustedDolphins++;
//            }
//        }

        dolphins.removeIf(d -> d.getEnergy() <= 0);

        return String.format(DOLPHINS_PLAY, poolName, exhaustedDolphins);
    }

    @Override
    public String getStatistics() {
        StringBuilder sb = new StringBuilder();

        for (Pool pool : pools) {
            String firstRow = DOLPHINS_FINAL.formatted(pool.getName());
            sb.append(firstRow).append(System.lineSeparator());

            Collection<Dolphin> dolphins = pool.getDolphins();

            String dolphinsInfo = dolphins.stream()
                    .map(d -> d.getName() + " - " + d.getEnergy())
                    .collect(Collectors.joining(DELIMITER));

            dolphinsInfo = dolphinsInfo.isEmpty() ? NONE : dolphinsInfo;

            sb.append(dolphinsInfo).append(System.lineSeparator());
        }

        return sb.toString().trim();
    }
}
