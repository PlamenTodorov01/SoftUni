package polymorphism_exercise.vehicles_extension_02;

import java.text.DecimalFormat;

public abstract class Vehicle {
    private double fuelQuantity;
    private double fuelCostPerKm;
    private double tankCapacity;

    public Vehicle(double fuelQuantity, double fuelCostPerKm, double tankCapacity) {
        this.fuelQuantity = fuelQuantity;
        this.fuelCostPerKm = fuelCostPerKm;
        this.tankCapacity = tankCapacity;
    }

    public double getFuelCostPerKm() {
        return fuelCostPerKm;
    }

    public double getFuelQuantity() {
        return fuelQuantity;
    }

    public double getTankCapacity() {
        return tankCapacity;
    }

    public void setFuelCostPerKm(double fuelCostPerKm) {
        this.fuelCostPerKm = fuelCostPerKm;
    }

    public void setFuelQuantity(double fuelQuantity) {
        this.fuelQuantity = fuelQuantity;
    }

    public void drive(double distance) {
        double requiredFuel = getFuelCostPerKm() * distance;

        if (getFuelQuantity() < requiredFuel) {
            System.out.printf("%s needs refueling\n", getClass().getSimpleName());
            return;
        }
        DecimalFormat df = new DecimalFormat("#.##");
        setFuelQuantity(getFuelQuantity() - requiredFuel);
        System.out.printf("%s travelled %s km\n", getClass().getSimpleName(), df.format(distance));
    }

    public void refuel(double litersToRefuel) {
        if (litersToRefuel <= 0) {
            System.out.println("Fuel must be a positive number");
        } else if (getTankCapacity() < fuelQuantity + litersToRefuel) {
            System.out.println("Cannot fit fuel in tank");
        } else {
            setFuelQuantity(getFuelQuantity() + litersToRefuel);
        }

    }

    @Override
    public String toString() {
        return String.format("%s: %.2f",getClass().getSimpleName(),getFuelQuantity());
    }
}
